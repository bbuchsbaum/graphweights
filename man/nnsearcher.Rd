% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/searcher.R
\name{nnsearcher}
\alias{nnsearcher}
\title{Create a Nearest Neighbor Searcher Object}
\usage{
nnsearcher(
  X,
  labels = 1:nrow(labels),
  ...,
  distance = c("l2", "euclidean", "cosine", "ip"),
  M = 16,
  ef = 200
)
}
\arguments{
\item{X}{Numeric matrix where rows represent observations and columns represent features}

\item{labels}{Vector of labels for the observations (default: 1:nrow(labels))}

\item{...}{Additional arguments passed to the HNSW builder}

\item{distance}{Character string specifying the distance metric (default: "l2")}

\item{M}{Integer controlling the number of connections (default: 16)}

\item{ef}{Integer controlling the search accuracy (default: 200)}
}
\value{
An object of class "nnsearcher" containing:
* X: The input feature matrix
* labels: Vector of observation labels
* ann: The HNSW index object
* distance: The chosen distance metric
* ef: The ef parameter value
* M: The M parameter value
}
\description{
Creates an efficient nearest neighbor search object using the Hierarchical Navigable Small World
(HNSW) algorithm. This implementation is particularly useful for high-dimensional data and
large-scale nearest neighbor search tasks.
}
\details{
The HNSW algorithm builds a multilayer graph structure for efficient approximate nearest
neighbor search. The algorithm provides a good balance between search accuracy and speed.
Key parameters that affect the search quality and speed are:
* M: The number of connections per element in the graph
* ef: The size of the dynamic candidate list during search

The supported distance metrics are:
* l2: Euclidean distance (L2 norm)
* euclidean: Same as l2
* cosine: Cosine similarity
* ip: Inner product
}
\examples{
# Create searcher for iris dataset
data(iris)
X <- as.matrix(iris[, 1:4])
labels <- iris$Species
searcher <- nnsearcher(X, labels, distance = "l2", M = 16, ef = 200)

# Search for nearest neighbors
nn <- find_nn(searcher, k = 5)

# Create similarity graph
graph <- neighbor_graph(searcher, k = 5, type = "normal", transform = "heat")

}
\seealso{
* \code{\link{find_nn}} for searching nearest neighbors
* \code{\link{neighbor_graph}} for creating similarity graphs
* \code{\link{dist_to_sim}} for converting distances to similarities
}
