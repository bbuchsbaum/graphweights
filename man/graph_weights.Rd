% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/knn_weights.R
\name{graph_weights}
\alias{graph_weights}
\title{Graph-based Weight Matrix Construction}
\usage{
graph_weights(
  X,
  k = 5,
  neighbor_mode = c("knn", "epsilon"),
  weight_mode = c("heat", "normalized", "binary", "euclidean", "cosine", "correlation"),
  type = c("normal", "mutual", "asym"),
  sigma = NULL,
  eps = NULL,
  labels = NULL,
  ...
)
}
\arguments{
\item{X}{Numeric matrix where rows are instances and columns are features}

\item{k}{Integer specifying the number of nearest neighbors (default: 5)}

\item{neighbor_mode}{Character string specifying the neighbor selection method:
"knn" or "epsilon"}

\item{weight_mode}{Character string specifying the weight computation method:
"heat", "normalized", "binary", "euclidean", "cosine", or "correlation"}

\item{type}{Character string specifying the neighbor relationship type:
"normal" (standard k-NN), "mutual" (mutual k-NN), or "asym" (asymmetric)}

\item{sigma}{Numeric bandwidth parameter for heat kernel (if NULL, estimated from data)}

\item{eps}{Numeric epsilon value for epsilon-neighborhood (not implemented)}

\item{labels}{Optional factor vector of instance labels for supervised methods}

\item{...}{Additional arguments passed to internal functions}
}
\value{
An object of class "neighbor_graph" containing:
\itemize{
  \item A sparse weight matrix representing the graph
  \item Parameters used to construct the graph
}
}
\description{
Constructs a weight matrix representing similarities between instances in a dataset
using various neighborhood and weighting schemes. This is particularly useful
for creating adjacency matrices for graph-based learning algorithms.
}
\details{
The function provides several methods for constructing the weight matrix:

\strong{Neighbor Modes:}
\itemize{
  \item \code{knn}: k-nearest neighbors approach
  \item \code{epsilon}: epsilon-neighborhood approach (not yet implemented)
}

\strong{Weight Modes:}
\itemize{
  \item \code{heat}: Heat kernel weights
  \item \code{normalized}: Normalized heat kernel weights
  \item \code{binary}: Binary weights (1 for neighbors, 0 otherwise)
  \item \code{euclidean}: Euclidean distances as weights
  \item \code{cosine}: Cosine similarity weights
  \item \code{correlation}: Correlation-based weights
}
}
\examples{
# Generate example data
set.seed(123)
X <- matrix(rnorm(100 * 10), nrow = 100)

# Create graph with heat kernel weights
g1 <- graph_weights(X, k = 5, neighbor_mode = "knn",
                   weight_mode = "heat")

# Create graph with binary weights and mutual neighbors
g2 <- graph_weights(X, k = 5, neighbor_mode = "knn",
                   weight_mode = "binary", type = "mutual")

# Create graph with normalized weights and labels
labels <- factor(rep(1:2, each = 50))
g3 <- graph_weights(X, k = 5, neighbor_mode = "knn",
                   weight_mode = "normalized", labels = labels)

}
\references{
Luxburg, U. (2007). A tutorial on spectral clustering.
Statistics and Computing, 17(4), 395-416.
}
\seealso{
\code{\link{heat_kernel}} for the heat kernel function
\code{\link{estimate_sigma}} for bandwidth parameter estimation
}
